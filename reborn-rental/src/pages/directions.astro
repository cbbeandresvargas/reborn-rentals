---
import Layout from "../layouts/Layout.astro";
---

<Layout>
  <!-- Step 2: Select Jobsite & Time -->
  <div class="max-w-6xl mx-auto px-6 mt-20 mb-20">
    <div class="bg-white rounded-lg  p-2">
      <!-- Section Title -->
      <h1 class="text-3xl font-bold text-gray-800 mb-4">Select Jobsite & Time</h1>
      
      <!-- Introductory Text -->
      <p class="text-gray-600 text-sm mb-8 leading-relaxed">
        Select date and place of delivery, depending on your location, delivery fees may apply, Long fares apply if jobsite is located 4 hours away or more. Orders outside of Mainland US, not accepted.
      </p>
      
      <!-- Date Selection Section -->
      <div class="mb-8">
        <div class="flex gap-4 mb-4">
          <!-- Start Date -->
          <div class="flex-1">
            <label class="block text-sm font-medium text-gray-700 mb-2">Start Date</label>
            <input 
              type="date" 
              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#CE9704] focus:border-transparent"
              id="start-date"
              value="2021-10-30"
            />
          </div>
          
          <!-- End Date -->
          <div class="flex-1">
            <label class="block text-sm font-medium text-gray-700 mb-2">End Date</label>
            <div class="relative">
              <input 
                type="date" 
                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#CE9704] focus:border-transparent pr-10"
                id="end-date"
                value="2021-12-06"
              />
              <div class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                </svg>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Date Selection Instructions -->
        <p class="text-gray-600 text-sm leading-relaxed">
          Choose start and end dates for your rental period. Weekend deliveries are available. Tap a start date and then an end date to set your delivery period. You can select weekends too. The selected range will be highlighted.
        </p>
      </div>
      
      <!-- Jobsite Address Section -->
      <div class="mb-8">
        <div class="flex justify-between items-start mb-4">
          <h2 class="text-xl font-semibold text-gray-800">Insert Jobsite Address</h2>
          <span class="text-sm text-gray-500 underline">*Cancellation Fees may apply.</span>
        </div>
        
        <!-- Address Search Input -->
        <div class="relative">
          <div class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
          </div>
          <input 
            type="text" 
            placeholder="Start typing and select from suggestions..."
            class="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#CE9704] focus:border-transparent"
            id="jobsite-address"
          />
        </div>
      </div>
      
      <!-- Pickup Options -->
      <div class="mb-8">
        <div class="space-y-4">
          <label class="flex items-center cursor-pointer">
            <input type="checkbox" name="pickup-option" class="w-4 h-4 text-[#CE9704] border-gray-300 rounded focus:ring-[#CE9704] focus:ring-2" id="self-pickup" value="self-pickup">
            <span class="ml-3 text-gray-700">Self-Pickup</span>
          </label>
          
          <label class="flex items-center cursor-pointer">
            <input type="checkbox" name="pickup-option" class="w-4 h-4 text-[#CE9704] border-gray-300 rounded focus:ring-[#CE9704] focus:ring-2" id="no-address" value="no-address">
            <span class="ml-3 text-gray-700">Jobsite Lot doesn't have an address.</span>
          </label>
        </div>
        
        <!-- Interactive Map Section -->
        <div class="mt-8">
          <h3 class="text-lg font-semibold text-gray-800 mb-4">Select Delivery Location on Map</h3>
          <p class="text-gray-600 text-sm mb-4">
            Click on the map to select your delivery location. The map will show the route from our office to your selected location.
          </p>
          
          <!-- Map Container -->
          <div class="relative">
            <div id="delivery-map" class="w-full h-96 rounded-lg overflow-hidden border border-gray-300 shadow-lg">
              <!-- Map will be loaded here -->
            </div>
            
            <!-- Map Controls -->
            <div class="absolute top-4 right-4 bg-white rounded-lg shadow-lg p-2 space-y-2 z-50">
              <button 
                id="center-map-btn" 
                class="bg-[#CE9704] text-white px-3 py-2 rounded text-sm font-medium hover:bg-[#B8860B] transition-colors duration-200 block w-full"
                title="Center on Reborn Rentals Office"
              >
                üìç Our Office
              </button>
              <button 
                id="clear-route-btn" 
                class="bg-gray-600 text-white px-3 py-2 rounded text-sm font-medium hover:bg-gray-700 transition-colors duration-200 block w-full"
                title="Clear Route"
              >
                üóëÔ∏è Clear Route
              </button>
            </div>
            
            <!-- Selected Location Info -->
            <div id="selected-location-info" class="absolute bottom-4 left-4 right-4 bg-white rounded-lg shadow-lg p-4 z-50">
              <div class="flex justify-between items-start">
                <div class="flex-1">
                  <h4 class="font-semibold text-gray-800 text-sm">Selected Location:</h4>
                  <p id="selected-address" class="text-gray-600 text-sm mt-1">Click on the map to select a delivery location</p>
                  <p id="distance-info" class="text-[#CE9704] text-xs mt-1"></p>
                </div>
                <button 
                  id="use-location-btn" 
                  class="bg-[#CE9704] text-white px-3 py-1 rounded text-xs font-medium hover:bg-[#B8860B] transition-colors duration-200 ml-2"
                >
                  Use This Location
                </button>
              </div>
            </div>
          </div>
          
          <!-- Map Instructions -->
          <div class="mt-4 p-4 bg-blue-50 rounded-lg border border-blue-200">
            <div class="flex items-start">
              <div class="shrink-0">
                <svg class="w-5 h-5 text-blue-500 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              <div class="ml-3">
                <h4 class="text-sm font-medium text-blue-800">How to use the map:</h4>
                <ul class="text-sm text-blue-700 mt-1 space-y-1">
                  <li>‚Ä¢ Click anywhere on the map to select your delivery location</li>
                  <li>‚Ä¢ The map will automatically show the route from our office to your location</li>
                  <li>‚Ä¢ Use "üìç Our Office" to center the map on our location</li>
                  <li>‚Ä¢ Use "üóëÔ∏è Clear Route" to remove the current route and start over</li>
                  <li>‚Ä¢ Click "Use This Location" to set the address in the form above</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Self-Pickup Dropdown -->
        <div id="self-pickup-details" class="mt-6 p-6 bg-gray-50 rounded-lg border border-gray-200 hidden">
          <h3 class="text-lg font-semibold text-gray-800 mb-4">Pickup Location Details</h3>
          
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <!-- Address -->
            <div>
              <h4 class="text-base font-semibold text-gray-900 mb-3">Our Address</h4>
              <div class="space-y-1 text-gray-700">
                <p>401 Ryland St.</p>
                <p>Ste 200 A</p>
                <p>Reno, NV 89502</p>
                <p>Denver, CO 80202</p>
                <p>United States</p>
              </div>
            </div>
            
            <!-- Hours -->
            <div>
              <h4 class="text-base font-semibold text-gray-900 mb-3">Hours</h4>
              <ul class="text-gray-700 space-y-1">
                <li><span class="font-medium">Mon‚ÄìFri:</span> 08:00 ‚Äì 18:00</li>
                <li><span class="font-medium">Sat:</span> 09:00 ‚Äì 14:00</li>
                <li><span class="font-medium">Sun:</span> Closed</li>
              </ul>
            </div>
          </div>
          
          <!-- Map -->
          <div class="mt-6">
            <h4 class="text-base font-semibold text-gray-900 mb-3">Location Map</h4>
            <div class="rounded-lg overflow-hidden border border-gray-300">
              <iframe 
                src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3077.576787884259!2d-119.80605779999999!3d39.5240405!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x809940b3fe48bd53%3A0x4e3afeee9f24c1bc!2s401%20Ryland%20St%20Suite%20200-A%2C%20Reno%2C%20NV%2089502%2C%20EE.%20UU.!5e0!3m2!1ses-419!2sbo!4v1761325010616!5m2!1ses-419!2sbo" 
                width="100%" 
                height="300" 
                style="border:0;" 
                allowfullscreen="" 
                loading="lazy" 
                referrerpolicy="no-referrer-when-downgrade"
                class="w-full h-64"
              ></iframe>
            </div>
          </div>
        </div>
      </div>
      
     
    </div>
  </div>

  <script>
    // Preserve cart data from Step 1
    let cart: any[] = [];

    // Load cart data from localStorage or session
    function loadCartData() {
      const savedCart = localStorage.getItem('reborn-rentals-cart');
      if (savedCart) {
        cart = JSON.parse(savedCart);
        console.log('Cart loaded from Step 1:', cart);
      }
    }

    // Save cart data to localStorage
    function saveCartData() {
      localStorage.setItem('reborn-rentals-cart', JSON.stringify(cart));
    }


    // Update cart badge
    function updateCartBadge() {
      const cartBadge = document.getElementById('cart-badge');
      if (cartBadge) {
        cartBadge.textContent = cart.length.toString();
        cartBadge.classList.toggle('hidden', cart.length === 0);
      }
    }

    // Update cart content
    function updateCartContent() {
      const cartItems = document.querySelector('.cart-items');
      const subtotalSection = document.getElementById('subtotal-section');
      
      if (cartItems) {
        if (cart.length === 0) {
          cartItems.innerHTML = `
            <div class="flex flex-col items-center justify-center h-full">
              <p class="text-white font-semibold italic text-center">Your cart is empty.</p>
              <p class="text-white text-sm text-center">Looks like you haven't made your choice yet.</p>
              <p class="text-white text-sm text-center">Start by adding items to your cart.</p>
            </div>
          `;
          if (subtotalSection) {
            subtotalSection.style.display = 'none';
          }
        } else {
          // Load products data for display
          const products = [
            { id: "120-23DRX", name: "Concrete Washout Pan", price: 20, image: "/Product1.png", size: "Large", dimensions: "7'x7'x27\"", capacity: "18.25 ton, 587 gallons capacity" },
            { id: "121-24DRY", name: "Heavy Duty Excavator", price: 150, image: "/Product2.png", size: "Medium", dimensions: "12'x8'x15\"", capacity: "25 ton, 800 gallons capacity" },
            { id: "122-25DRZ", name: "Industrial Mixer", price: 85, image: "/Product1.png", size: "Small", dimensions: "5'x5'x20\"", capacity: "12 ton, 400 gallons capacity" },
            { id: "123-26DSA", name: "Construction Compactor", price: 120, image: "/Product2.png", size: "Large", dimensions: "8'x6'x30\"", capacity: "22 ton, 700 gallons capacity" },
            { id: "124-27DSB", name: "Utility Trailer", price: 45, image: "/Product1.png", size: "Medium", dimensions: "6'x4'x18\"", capacity: "15 ton, 500 gallons capacity" },
            { id: "125-28DSC", name: "Material Handler", price: 95, image: "/Product2.png", size: "Large", dimensions: "10'x8'x25\"", capacity: "20 ton, 650 gallons capacity" },
            { id: "126-29DSD", name: "Concrete Pump", price: 200, image: "/Product1.png", size: "Extra Large", dimensions: "12'x10'x35\"", capacity: "30 ton, 900 gallons capacity" },
            { id: "127-30DSE", name: "Crane Attachment", price: 75, image: "/Product2.png", size: "Small", dimensions: "4'x4'x15\"", capacity: "10 ton, 300 gallons capacity" },
            { id: "128-31DSF", name: "Hydraulic System", price: 110, image: "/Product1.png", size: "Medium", dimensions: "7'x5'x22\"", capacity: "18 ton, 600 gallons capacity" },
            { id: "129-32DSG", name: "Power Generator", price: 65, image: "/Product2.png", size: "Small", dimensions: "5'x3'x16\"", capacity: "8 ton, 250 gallons capacity" }
          ];

          cartItems.innerHTML = cart.map((item, index) => `
            <div class="bg-[#4A4A4A] rounded-lg border border-gray-600 mb-3 overflow-hidden shadow-md hover:shadow-lg transition-shadow duration-200">
              <div class="flex items-center p-3">
                <!-- Product Image -->
                <div class="flex-shrink-0 mr-3">
                  <div class="w-16 h-16 bg-white rounded-lg p-1 flex items-center justify-center shadow-sm">
                    <img 
                      src="${products.find(p => p.id === item.id)?.image || '/Product1.png'}" 
                      alt="${item.name}"
                      class="w-full h-full object-contain"
                    />
                  </div>
                </div>
                
                <!-- Product Info -->
                <div class="flex-1 min-w-0">
                  <!-- Header Row: Name + Remove -->
                  <div class="flex justify-between items-start mb-2">
                    <h4 class="text-white font-bold text-base uppercase leading-tight pr-2 truncate">${item.name}</h4>
                    <button onclick="removeFromCart(${index})" class="text-gray-400 hover:text-red-400 p-1 transition-colors duration-200 flex-shrink-0">
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                      </svg>
                    </button>
                  </div>
                  
                  <!-- Info Row: ID + Price -->
                  <div class="flex justify-between items-center mb-2">
                    <span class="text-[#CE9704] font-semibold text-xs">ID: ${item.id}</span>
                    <span class="text-white font-bold text-base">${products.find(p => p.id === item.id)?.price || item.price}$/day*</span>
                  </div>
                  
                  <!-- Quantity Control -->
                  <div class="flex items-center justify-end mb-2">
                    <div class="flex items-center bg-gray-600 rounded-md">
                      <button onclick="updateQuantity(${index}, -1)" class="bg-gray-600 text-white px-2 py-1 rounded-l-md text-xs hover:bg-gray-500 transition-colors duration-200">
                        ‚àí
                      </button>
                      <span class="text-white mx-2 font-bold text-sm min-w-[16px] text-center">${item.quantity}</span>
                      <button onclick="updateQuantity(${index}, 1)" class="bg-gray-600 text-white px-2 py-1 rounded-r-md text-xs hover:bg-gray-500 transition-colors duration-200">
                        +
                      </button>
                    </div>
                  </div>
                  
                  <!-- Compact Specifications -->
                  <div class="bg-gray-800 p-2 rounded text-xs space-y-1">
                    <div class="flex justify-between">
                      <span class="text-gray-300">Size:</span>
                      <span class="text-white">${products.find(p => p.id === item.id)?.size || 'N/A'}</span>
                    </div>
                    <div class="text-white font-mono text-xs">${products.find(p => p.id === item.id)?.dimensions || 'N/A'}</div>
                    <div class="text-white text-xs">${products.find(p => p.id === item.id)?.capacity || 'N/A'}</div>
                  </div>
                </div>
              </div>
            </div>
          `).join('');
          
          if (subtotalSection) {
            subtotalSection.style.display = 'block';
          }
        }
      }
      
      // Update subtotal
      updateSubtotal();
    }

    // Update subtotal
    function updateSubtotal() {
      const subtotalAmount = document.getElementById('subtotal-amount');
      const totalItems = document.getElementById('total-items');
      
      if (cart.length === 0) {
        if (subtotalAmount) subtotalAmount.textContent = '$0';
        if (totalItems) totalItems.textContent = '0';
        return;
      }
      
      // Load products data for price calculation
      const products = [
        { id: "120-23DRX", name: "Concrete Washout Pan", price: 20, image: "/Product1.png", size: "Large", dimensions: "7'x7'x27\"", capacity: "18.25 ton, 587 gallons capacity" },
        { id: "121-24DRY", name: "Heavy Duty Excavator", price: 150, image: "/Product2.png", size: "Medium", dimensions: "12'x8'x15\"", capacity: "25 ton, 800 gallons capacity" },
        { id: "122-25DRZ", name: "Industrial Mixer", price: 85, image: "/Product1.png", size: "Small", dimensions: "5'x5'x20\"", capacity: "12 ton, 400 gallons capacity" },
        { id: "123-26DSA", name: "Construction Compactor", price: 120, image: "/Product2.png", size: "Large", dimensions: "8'x6'x30\"", capacity: "22 ton, 700 gallons capacity" },
        { id: "124-27DSB", name: "Utility Trailer", price: 45, image: "/Product1.png", size: "Medium", dimensions: "6'x4'x18\"", capacity: "15 ton, 500 gallons capacity" },
        { id: "125-28DSC", name: "Material Handler", price: 95, image: "/Product2.png", size: "Large", dimensions: "10'x8'x25\"", capacity: "20 ton, 650 gallons capacity" },
        { id: "126-29DSD", name: "Concrete Pump", price: 200, image: "/Product1.png", size: "Extra Large", dimensions: "12'x10'x35\"", capacity: "30 ton, 900 gallons capacity" },
        { id: "127-30DSE", name: "Crane Attachment", price: 75, image: "/Product2.png", size: "Small", dimensions: "4'x4'x15\"", capacity: "10 ton, 300 gallons capacity" },
        { id: "128-31DSF", name: "Hydraulic System", price: 110, image: "/Product1.png", size: "Medium", dimensions: "7'x5'x22\"", capacity: "18 ton, 600 gallons capacity" },
        { id: "129-32DSG", name: "Power Generator", price: 65, image: "/Product2.png", size: "Small", dimensions: "5'x3'x16\"", capacity: "8 ton, 250 gallons capacity" }
      ];
      
      const total = cart.reduce((sum, item) => {
        const product = products.find(p => p.id === item.id);
        const price = product ? product.price : 0;
        return sum + (price * item.quantity);
      }, 0);
      const totalQuantity = cart.reduce((sum, item) => sum + item.quantity, 0);
      
      if (subtotalAmount) subtotalAmount.textContent = `$${total.toFixed(2)}`;
      if (totalItems) totalItems.textContent = totalQuantity.toString();
    }

    // Update when where button
    function updateWhenWhereButton() {
      const whenWhereBtn = document.getElementById('when-where-btn') as any;
      if (whenWhereBtn) {
        if (cart.length > 0) {
          whenWhereBtn.disabled = false;
          whenWhereBtn.className = 'w-full bg-[#CE9704] text-white py-3 px-4 rounded-lg font-bold text-lg cursor-pointer hover:bg-[#B8860B] transition-all duration-300';
        } else {
          whenWhereBtn.disabled = true;
          whenWhereBtn.className = 'w-full bg-gray-600 text-gray-400 py-3 px-4 rounded-lg font-bold text-lg cursor-not-allowed transition-all duration-300';
        }
      }
    }

    // Update cart display
    function updateCartDisplay() {
      updateCartBadge();
      updateCartContent();
      updateWhenWhereButton();
    }

    // Form validation
    function validateForm() {
      const startDate = document.getElementById('start-date') as HTMLInputElement;
      const endDate = document.getElementById('end-date') as HTMLInputElement;
      const jobsiteAddress = document.getElementById('jobsite-address') as HTMLInputElement;
      const selfPickup = document.getElementById('self-pickup') as HTMLInputElement;
      const noAddress = document.getElementById('no-address') as HTMLInputElement;
      
      if (!startDate.value || !endDate.value) {
        alert('Please select both start and end dates.');
        return false;
      }
      
      if (new Date(startDate.value) >= new Date(endDate.value)) {
        alert('End date must be after start date.');
        return false;
      }
      
      // Only require address if not self-pickup and not no-address
      if (!selfPickup.checked && !noAddress.checked && !jobsiteAddress.value.trim()) {
        alert('Please enter a jobsite address or select a pickup option.');
        return false;
      }
      
      return true;
    }

    // Save form data
    function saveFormData() {
      const formData = {
        startDate: (document.getElementById('start-date') as HTMLInputElement).value,
        endDate: (document.getElementById('end-date') as HTMLInputElement).value,
        jobsiteAddress: (document.getElementById('jobsite-address') as HTMLInputElement).value,
        pickupOption: (() => {
          const checked = document.querySelector('input[name="pickup-option"]:checked') as HTMLInputElement;
          return checked ? checked.value : null;
        })(),
        selfPickupChecked: (document.getElementById('self-pickup') as HTMLInputElement).checked,
        noAddressChecked: (document.getElementById('no-address') as HTMLInputElement).checked
      };
      
      localStorage.setItem('reborn-rentals-directions', JSON.stringify(formData));
      console.log('Directions data saved:', formData);
    }

    // Toggle self-pickup details
    function toggleSelfPickupDetails() {
      const selfPickup = document.getElementById('self-pickup') as HTMLInputElement;
      const details = document.getElementById('self-pickup-details');
      const jobsiteAddress = document.getElementById('jobsite-address') as HTMLInputElement;
      
      if (selfPickup.checked) {
        details?.classList.remove('hidden');
        jobsiteAddress.placeholder = 'Optional: Additional delivery instructions...';
      } else {
        details?.classList.add('hidden');
        jobsiteAddress.placeholder = 'Start typing and select from suggestions...';
      }
    }

    // Initialize on page load
    document.addEventListener('DOMContentLoaded', function() {
      loadCartData();
      
      // Update cart badge if it exists
      const cartBadge = document.getElementById('cart-badge');
      if (cartBadge) {
        cartBadge.textContent = cart.length.toString();
        cartBadge.classList.toggle('hidden', cart.length === 0);
      }

      // Ensure no checkboxes are selected by default - FIRST THING
      const allCheckboxes = document.querySelectorAll('input[name="pickup-option"]');
      allCheckboxes.forEach((checkbox: any) => {
        checkbox.checked = false;
      });

      // Open cart sidebar automatically
      setTimeout(() => {
        const cartSidebar = document.getElementById('cart-sidebar');
        const overlay = document.getElementById('sidebar-overlay');
        
        if (cartSidebar && overlay) {
          // Remove translate-x-full and add translate-x-0
          cartSidebar.classList.remove('translate-x-full');
          cartSidebar.classList.add('translate-x-0');
          

          // Adjust main content margin
          const mainContent = document.getElementById('main-content');
          if (mainContent) {
            mainContent.classList.add('cart-open');
            if (window.innerWidth >= 1024) {
              mainContent.style.marginRight = '384px'; // lg:w-96 = 384px
            } else if (window.innerWidth >= 640) {
              mainContent.style.marginRight = '320px'; // sm:w-80 = 320px
            }
          }
        }
      }, 100); // Small delay to ensure DOM is ready

      // Checkbox event listeners - Make them work like radio buttons (only one selected at a time)
      const selfPickupCheckbox = document.getElementById('self-pickup') as HTMLInputElement;
      const noAddressCheckbox = document.getElementById('no-address') as HTMLInputElement;
      
      // Ensure only one checkbox can be selected at a time
      if (selfPickupCheckbox) {
        selfPickupCheckbox.addEventListener('change', function() {
          if (selfPickupCheckbox.checked) {
            // Uncheck the other checkbox
            if (noAddressCheckbox) {
              noAddressCheckbox.checked = false;
            }
            toggleSelfPickupDetails();
          }
        });
      }
      
      if (noAddressCheckbox) {
        noAddressCheckbox.addEventListener('change', function() {
          if (noAddressCheckbox.checked) {
            // Uncheck the other checkbox
            if (selfPickupCheckbox) {
              selfPickupCheckbox.checked = false;
            }
            
            const details = document.getElementById('self-pickup-details');
            const jobsiteAddress = document.getElementById('jobsite-address') as HTMLInputElement;
            
            details?.classList.add('hidden');
            jobsiteAddress.placeholder = 'Optional: Additional delivery instructions...';
          } else {
            const jobsiteAddress = document.getElementById('jobsite-address') as HTMLInputElement;
            jobsiteAddress.placeholder = 'Start typing and select from suggestions...';
          }
        });
      }

      // Load saved form data if exists
      const savedFormData = localStorage.getItem('reborn-rentals-directions');
      if (savedFormData) {
        const formData = JSON.parse(savedFormData);
        (document.getElementById('start-date') as HTMLInputElement).value = formData.startDate || '';
        (document.getElementById('end-date') as HTMLInputElement).value = formData.endDate || '';
        (document.getElementById('jobsite-address') as HTMLInputElement).value = formData.jobsiteAddress || '';
        
        // Handle checkboxes - only if there's a saved pickupOption
        if (formData.pickupOption) {
          const selectedCheckbox = document.querySelector(`input[name="pickup-option"][value="${formData.pickupOption}"]`) as HTMLInputElement;
          if (selectedCheckbox) {
            selectedCheckbox.checked = true;
            if (formData.pickupOption === 'self-pickup') {
              toggleSelfPickupDetails();
            }
          }
        }
      }

      // Event listener para el bot√≥n "Proceed to Payment"
      const whenWhereBtn = document.getElementById('when-where-btn') as any;
      if (whenWhereBtn) {
        whenWhereBtn.addEventListener('click', (e: any) => {
          const button = e.target as any;
          if (!button.disabled) {
            // Validate form before proceeding
            if (validateForm()) {
              // Save form data
              saveFormData();
              
              // Save cart data to localStorage before redirecting
              localStorage.setItem('reborn-rentals-cart', JSON.stringify(cart));
              
              // Redirect to checkout page
              window.location.href = '/checkout';
            }
          }
        });
      }
    });

    // Make functions global for potential use
    (window as any).cart = cart;
    (window as any).loadCartData = loadCartData;
    (window as any).saveCartData = saveCartData;
    
    // Define cart functions
    function removeFromCart(index: any) {
      cart.splice(index, 1);
      localStorage.setItem('reborn-rentals-cart', JSON.stringify(cart));
      updateCartDisplay();
    }
    
    function updateQuantity(index: any, change: any) {
      if (cart[index]) {
        cart[index].quantity += change;
        if (cart[index].quantity <= 0) {
          cart.splice(index, 1);
        } else {
          cart[index].quantity = Math.max(0, cart[index].quantity);
        }
        localStorage.setItem('reborn-rentals-cart', JSON.stringify(cart));
        updateCartDisplay();
      }
    }

    // Make functions global
    (window as any).removeFromCart = removeFromCart;
    (window as any).updateQuantity = updateQuantity;
  </script>

  <!-- Leaflet CSS -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
  
  <!-- Leaflet JS -->
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
  
  <!-- Map Script -->
  <script>
    let map: any;
    let selectedMarker: any;
    let officeMarker: any;
    let routeLayer: any;
    
    // Reborn Rentals Office coordinates
    const officeLocation = {
      lat: 39.5240405,
      lng: -119.80605779999999,
      address: "401 Ryland St Suite 200-A, Reno, NV 89502, USA"
    };

    // Initialize Map
    function initMap() {
      console.log('Initializing Leaflet map...');
      
      // Get L from window
      const L = (window as any).L;
      
      // Check if Leaflet is available
      if (typeof L === 'undefined') {
        console.error('Leaflet not loaded');
        const mapElement = document.getElementById('delivery-map');
        if (mapElement) {
          (mapElement as HTMLElement).innerHTML = '<div class="flex items-center justify-center h-full bg-gray-100 text-gray-600">Map loading failed. Please refresh the page.</div>';
        }
        return;
      }
      
      try {
        // Create map with OpenStreetMap tiles (completely free, no API key needed)
        map = L.map('delivery-map').setView([officeLocation.lat, officeLocation.lng], 12);
        
        // Add OpenStreetMap tile layer
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
          attribution: '¬© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
          maxZoom: 19
        }).addTo(map);
        
        console.log('Map created successfully');

        // Add office marker
        const officeIcon = L.divIcon({
          html: `
            <div style="
              width: 40px; 
              height: 40px; 
              background: #CE9704; 
              border: 3px solid white; 
              border-radius: 50%; 
              display: flex; 
              align-items: center; 
              justify-content: center;
              font-size: 20px;
              box-shadow: 0 2px 8px rgba(0,0,0,0.3);
            ">
              üè¢
            </div>
          `,
          className: 'custom-div-icon',
          iconSize: [40, 40],
          iconAnchor: [20, 20]
        });

        officeMarker = L.marker([officeLocation.lat, officeLocation.lng], { icon: officeIcon })
          .addTo(map)
          .bindPopup('Reborn Rentals Office');

        // Add click listener to map
        map.on('click', function(event: any) {
          const clickedLocation = {
            lat: event.latlng.lat,
            lng: event.latlng.lng
          };
          
          selectLocation(clickedLocation);
        });

        // Center map button
        const centerBtn = document.getElementById('center-map-btn');
        if (centerBtn) {
          centerBtn.addEventListener('click', function() {
            map.setView([officeLocation.lat, officeLocation.lng], 12);
          });
        }

        // Clear route button
        const clearRouteBtn = document.getElementById('clear-route-btn');
        if (clearRouteBtn) {
          clearRouteBtn.addEventListener('click', function() {
            // Remove route layer
            if (routeLayer) {
              map.removeLayer(routeLayer);
              routeLayer = null;
            }
            
            // Remove selected marker
            if (selectedMarker) {
              map.removeLayer(selectedMarker);
              selectedMarker = null;
            }
            
            // Clear location info text
            const locationInfo = document.getElementById('selected-location-info');
            if (locationInfo) {
              const selectedAddress = document.getElementById('selected-address');
              const distanceInfo = document.getElementById('distance-info');
              if (selectedAddress) selectedAddress.textContent = 'Click on the map to select a delivery location';
              if (distanceInfo) distanceInfo.textContent = '';
            }
            
            // Clear address input
            const addressInput = document.getElementById('jobsite-address') as HTMLInputElement;
            if (addressInput) {
              addressInput.value = '';
            }
          });
        }

        // Use location button
        const useLocationBtn = document.getElementById('use-location-btn');
        if (useLocationBtn) {
          useLocationBtn.addEventListener('click', function() {
            const selectedAddress = document.getElementById('selected-address');
            if (selectedAddress && selectedAddress.textContent) {
              const addressInput = document.getElementById('jobsite-address') as HTMLInputElement;
              addressInput.value = selectedAddress.textContent;
              
              // Reset the location info text
              const locationInfo = document.getElementById('selected-location-info');
              if (locationInfo) {
                const selectedAddressElement = document.getElementById('selected-address');
                const distanceInfo = document.getElementById('distance-info');
                if (selectedAddressElement) selectedAddressElement.textContent = 'Click on the map to select a delivery location';
                if (distanceInfo) distanceInfo.textContent = '';
              }
            }
          });
        }
        
      } catch (error) {
        console.error('Error creating map:', error);
        const mapElement = document.getElementById('delivery-map');
        if (mapElement) {
          (mapElement as HTMLElement).innerHTML = '<div class="flex items-center justify-center h-full bg-gray-100 text-gray-600">Error loading map. Please refresh the page.</div>';
        }
      }
    }

    // Select location on map
    function selectLocation(location: any) {
      const L = (window as any).L;
      
      // Remove previous marker
      if (selectedMarker) {
        map.removeLayer(selectedMarker);
      }

      // Add new marker
      const selectedIcon = L.divIcon({
        html: `
          <div style="
            width: 40px; 
            height: 40px; 
            background: #4A4A4A; 
            border: 3px solid white; 
            border-radius: 50%; 
            display: flex; 
            align-items: center; 
            justify-content: center;
            font-size: 20px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.3);
          ">
            üìç
          </div>
        `,
        className: 'custom-div-icon',
        iconSize: [40, 40],
        iconAnchor: [20, 20]
      });

      selectedMarker = L.marker([location.lat, location.lng], { icon: selectedIcon })
        .addTo(map)
        .bindPopup('Selected Delivery Location');

      // Show loading state
      const distanceInfo = document.getElementById('distance-info');
      if (distanceInfo) {
        distanceInfo.textContent = 'Getting address...';
      }

      // Use Nominatim (OpenStreetMap) for reverse geocoding - FREE, no API key needed
      fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${location.lat}&lon=${location.lng}`)
        .then(response => response.json())
        .then(data => {
          const address = data.display_name || 'Address not found';
          
          // Update UI
          const selectedAddress = document.getElementById('selected-address');
          
          if (selectedAddress) selectedAddress.textContent = address;
          
          // Calculate distance and show route
          calculateRoute(location, address);
        })
        .catch(error => {
          console.error('Error getting address:', error);
          const address = `Lat: ${location.lat.toFixed(4)}, Lng: ${location.lng.toFixed(4)}`;
          
          const selectedAddress = document.getElementById('selected-address');
          const locationInfo = document.getElementById('selected-location-info');
          
          if (selectedAddress) selectedAddress.textContent = address;
          if (locationInfo) locationInfo.classList.remove('hidden');
          
          calculateRoute(location, address);
        });
    }

    // Calculate route and distance using OpenRouteService (FREE, no API key needed)
    function calculateRoute(destination: any, address: string) {
      const L = (window as any).L;
      
      // Show loading state
      const distanceInfo = document.getElementById('distance-info');
      if (distanceInfo) {
        distanceInfo.textContent = 'Calculating route...';
      }

      // Use free OpenRouteService
      const start = `${officeLocation.lng},${officeLocation.lat}`;
      const end = `${destination.lng},${destination.lat}`;
      
      fetch(`https://api.openrouteservice.org/v2/directions/driving-car?api_key=5b3ce3597851110001cf6248b4b8b8b8&start=${start}&end=${end}`)
        .then(response => {
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          return response.json();
        })
        .then(data => {
          if (data.features && data.features[0]) {
            const route = data.features[0];
            const distance = (route.properties.summary.distance / 1000).toFixed(1); // Convert to km
            const duration = Math.round(route.properties.summary.duration / 60); // Convert to minutes
            
            // Remove previous route layer
            if (routeLayer) {
              map.removeLayer(routeLayer);
            }
            
            // Draw route on map using Leaflet
            const coordinates = route.geometry.coordinates.map((coord: any) => [coord[1], coord[0]]);
            routeLayer = L.polyline(coordinates, {
              color: '#CE9704',
              weight: 6,
              opacity: 0.9,
              dashArray: '10, 5'
            }).addTo(map);
            
            // Update distance info
            if (distanceInfo) {
              distanceInfo.textContent = `Distance: ${distance} km ‚Ä¢ Duration: ${duration} min`;
            }
            
            // Fit map to show entire route
            const group = new L.featureGroup([routeLayer]);
            map.fitBounds(group.getBounds().pad(0.1));
            
          } else {
            throw new Error('No route found');
          }
        })
        .catch(error => {
          console.error('Error calculating route:', error);
          
          // Fallback: calculate straight line distance and draw straight line
          const distance = calculateDistance(officeLocation, destination);
          
          // Remove previous route layer
          if (routeLayer) {
            map.removeLayer(routeLayer);
          }
          
          // Draw straight line as fallback
          routeLayer = L.polyline([
            [officeLocation.lat, officeLocation.lng],
            [destination.lat, destination.lng]
          ], {
            color: '#CE9704',
            weight: 4,
            opacity: 0.6,
            dashArray: '5, 5'
          }).addTo(map);
          
          if (distanceInfo) {
            distanceInfo.textContent = `Straight line distance: ${distance.toFixed(1)} km (approximate)`;
          }
        });
    }

    // Calculate straight line distance
    function calculateDistance(point1: any, point2: any) {
      const R = 6371; // Earth's radius in km
      const dLat = (point2.lat - point1.lat) * Math.PI / 180;
      const dLng = (point2.lng - point1.lng) * Math.PI / 180;
      const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                Math.cos(point1.lat * Math.PI / 180) * Math.cos(point2.lat * Math.PI / 180) *
                Math.sin(dLng/2) * Math.sin(dLng/2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
      return R * c;
    }

    // Load map when page is ready
    document.addEventListener('DOMContentLoaded', function() {
      let attempts = 0;
      const maxAttempts = 50; // 5 seconds max
      
      // Wait for Leaflet to load
      function waitForLeaflet() {
        attempts++;
        
        if (typeof (window as any).L !== 'undefined') {
          console.log('Leaflet loaded, initializing map...');
          initMap();
        } else if (attempts < maxAttempts) {
          console.log(`Waiting for Leaflet to load... (attempt ${attempts}/${maxAttempts})`);
          setTimeout(waitForLeaflet, 100);
        } else {
          console.error('Leaflet failed to load after 5 seconds');
          const mapElement = document.getElementById('delivery-map');
          if (mapElement) {
            (mapElement as HTMLElement).innerHTML = '<div class="flex items-center justify-center h-full bg-gray-100 text-gray-600">Map failed to load. Please check your internet connection and refresh the page.</div>';
          }
        }
      }
      
      // Start checking for Leaflet
      setTimeout(waitForLeaflet, 100);
    });
  </script>
</Layout>
